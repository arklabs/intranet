<?php

/**
 * DmUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    intranet
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class DmUser extends PluginDmUser
{
    public function  __toString() {
    	if ($this->getFirstName() == '' || $this->getLastName() == '')
    		return $this->getUsername();
        return sprintf('%s %s', $this->getFirstName(), $this->getLastName());
   }

   public function getActiveEventsQuery($dstart, $dend) {
       $q = Doctrine_Query::create()
        ->from('Event e')
        ->where('e.dm_user_id = ?', $this->getId());

       return Doctrine::getTable('Event')->addActiveEventsQuery($q, $dstart, $dend, false);

   }

   public function getActiveEventsByCategoryQuery($catId, $dstart, $dend) {
       $q = $this->getActiveEventsQuery($dstart, $dend);
       return Doctrine::getTable('Event')->addActiveEventsByCategoryQuery($catId, $q);
   }

   public function getActiveEventsByCategory($catId, $dstart, $dend) {
       return $this->getActiveEventsByCategoryQuery($catId, $dstart, $dend)->execute();
   }

   public function countActiveEventsByCategory($catId, $dstart, $dend) {
       return $this->getActiveEventsByCategoryQuery($catId, $dstart, $dend)->count();
   }

   public function getActiveEventsByStatusQuery($statusId, $dstart, $dend) {
       $q = $this->getActiveEventsQuery($dstart, $dend);
       return Doctrine::getTable('Event')->addActiveEventsByStatusQuery($statusId, $q);
   }

   public function getActiveEventsByStatus($statusId, $dstart, $dend) {
       return $this->getActiveEventsByStatusQuery($statusId, $dstart, $dend)->execute();
   }

   public function countActiveEventsByStatus($statusId, $dstart, $dend) {
       return $this->getActiveEventsByStatusQuery($statusId, $dstart, $dend)->count();
   }
   public static function buildUsername($first_name, $last_name){

        $first_name = $first_name;
        // preventing white spaces in last_name
        $tmp = explode(' ',$last_name);
        $last_name = $tmp[0];
        // first method: first letter of name + last name
        $username = $first_name[0].$last_name;
        $username = self::slugify($username);
        if (!DmUserTable::usernameExist($username))
                return $username;
        // second method: last $username + year + month + day of creation
        $time = time();
        $hash = Date('Y', $time).Date('m', $time).Date('d', $time).Date('i', $time).Date('s', $time);
        $i = 0;
        for ($i=1;$i<=3;$i++){
                $username= $username.substr($hash,$i*2,2);
                $i++;
                if (!DmUserTable::usernameExist($username))
                  return $username;
        }
        return $username;
    }
  public static function buildPassword($username){
      return substr(sha1($username), 0,5); // 5 primeras letras del hash del nombre de usuario
  }
  public static function slugify($text)
	{
	   $text = str_ireplace("á", "a", $text);
	   $text = str_ireplace("é", "e", $text);
	   $text = str_ireplace("í", "i", $text);
	   $text = str_ireplace("ó", "o", $text);
	   $text = str_ireplace("ú", "u", $text);
	   $text = str_ireplace("ñ", "n", $text);
	   $text = strtolower($text);
	   return $text;
	}
}
