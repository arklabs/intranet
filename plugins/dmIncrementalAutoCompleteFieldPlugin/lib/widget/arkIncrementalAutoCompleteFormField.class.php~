<?php

/*
 * This file is part of the symfony package.
 * (c) Fabien Potencier <fabien.potencier@symfony-project.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfWidgetFormJQueryAutocompleter represents an autocompleter input widget rendered by JQuery.
 *
 * This widget needs JQuery to work.
 *
 * You also need to include the JavaScripts and stylesheets files returned by the getJavaScripts()
 * and getStylesheets() methods.
 *
 * If you use symfony 1.2, it can be done automatically for you.
 *
 * @package    symfony
 * @subpackage widget
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: sfWidgetFormJQueryAutocompleter.class.php 15839 2009-02-27 05:40:57Z fabien $
 */
class arkIncrementalAutoCompleteFormField extends sfWidgetFormInput
{
  /**
   * Configures the current widget.
   *
   * Available options:
   *
   *  * url:            The URL to call to get the choices to use (required)
   *  * config:         A JavaScript array that configures the JQuery autocompleter widget
   *  * value_callback: A callback that converts the value before it is displayed
   *
   * @param array $options     An array of options
   * @param array $attributes  An array of default HTML attributes
   *
   * @see sfWidgetForm
   */
  protected function configure($options = array(), $attributes = array())
  {
    $this->addRequiredOption('url');
    $this->addRequiredOption('owner_form');
    $this->addRequiredOption('field_name');

    $this->addOption('value_callback');
    $this->addOption('config', '{ }');

    $this->setFormField($this->getOption('owner_form'), $this->getOption('field_name'));

    parent::configure($options, $attributes);
  }
  protected function setFormField(sfForm $form, $field){
     if (is_null($form))
	throw new RuntimeException()

     // getting model name
     $thisFormModel = $form->getModelName();
     // getting foreign model name
     $model = '';
     foreach (Doctrine::getTable($thisFormModel)->getRelations() as $name=>$relation){
        if ($relation->getLocal() == $field){
          $model = $name;
          break;
        }
     }
     if ($model == '')
      throw new RunTimeException('Invalid Field '.$field, 500, '');
     $autoCompleterForeignField = sfValidatorForAutoCompleterWidget::GuessModelColumn($model);
     $value = '';
     if (!$form->isNew()){
        $foreignObjectId = $form->getObject()->get($model)->getId();
        $tmp = (is_null($foreignObjectId))?null:Doctrine::getTable($model)->findById($foreignObjectId);
        $value = (is_null($tmp))?"":$tmp[0]->get($autoCompleterForeignField);
     }
    $form->setWidget($field, new arkTMWidgetFormJQueryAutocompleter(array( 'url'=>$form->getOption('url')), array('value' => $value)));
    $choices = array();

     foreach (Doctrine::getTable($model)->createQuery()->execute() as $st)
         $choices[$st->get($autoCompleterForeignField)] = $st->get($autoCompleterForeignField);
     
    $form->setValidator($field, new sfValidatorString(array('required'=>$form->getValidator($field)->getOption('required'))));//(array('model'=>'State', 'choices'=>array_keys($choices)));//sfValidatorForAutoCompleterWidget::getChoicesFromModel('State')));
  }
  /**
   * @param  string $name        The element name
   * @param  string $value       The date displayed in this widget
   * @param  array  $attributes  An array of HTML attributes to be merged with the default HTML attributes
   * @param  array  $errors      An array of errors for the field
   *
   * @return string An HTML tag string
   *
   * @see sfWidgetForm
   */
  public function render($name, $value = null, $attributes = array(), $errors = array())
  {
    $visibleValue = $this->getOption('value_callback') ? call_user_func($this->getOption('value_callback'), $value) : $value;

    return $this->renderTag('input', array('type' => 'hidden', 'name' => $name, 'value' => $value)).
           parent::render('autocomplete_'.$name, $visibleValue, $attributes, $errors).
           sprintf(<<<EOF
<script type="text/javascript">
  jQuery(document).ready(function() {
    jQuery("#%s").change(function(){
            if ($(this).attr('value').trim() == ''){
                 $("#%s").val("");
            }
        }
    );
    jQuery("#%s")
    .autocomplete('%s', jQuery.extend({}, {
      dataType: 'json',
      parse:    function(data) {
        var parsed = [];
	var autVal =  jQuery("#%s").attr('value');
        data[autVal] = autVal;
        for (key in data) {
          parsed[parsed.length] = { data: [ data[key], key ], value: data[key], result: data[key] };
        }
        return parsed;
      }
    }, %s))
    .result(function(event, data) { 
	    jQuery("#%s").val(data[0].trim());
     });
  });
</script>
EOF
      ,
      $this->generateId('autocomplete_'.$name),
      $this->generateId($name),
      $this->generateId('autocomplete_'.$name),
      $this->getOption('url'),
      $this->generateId('autocomplete_'.$name),
      $this->getOption('config'),
      $this->generateId($name)
      
    );
  }

  /**
   * Gets the stylesheet paths associated with the widget.
   *
   * @return array An array of stylesheet paths
   */
  public function getStylesheets()
  {
    return array('/sfFormExtraPlugin/css/jquery.autocompleter.css' => 'all');
  }

  /**
   * Gets the JavaScript paths associated with the widget.
   *
   * @return array An array of JavaScript paths
   */
  public function getJavascripts()
  {
    return array('jquery-1.4.2.min','/sfFormExtraPlugin/js/jquery.autocompleter.js');
  }
}
